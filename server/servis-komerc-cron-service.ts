import * as cron from 'node-cron';
import { ServisKomercDailyReportService } from './servis-komerc-daily-report.js';

/**
 * Cron servis za automatske Servis Komerc izvje≈°taje i notifikacije
 * Pokreƒáe se automatski pri pokretanju aplikacije
 */
export class ServisKomercCronService {
  private dailyReportService: ServisKomercDailyReportService;
  private isRunning: boolean = false;

  constructor() {
    this.dailyReportService = new ServisKomercDailyReportService();
  }

  /**
   * Pokretanje cron job-ova za Servis Komerc
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      console.log('[SERVIS KOMERC CRON] ‚ö†Ô∏è Cron job-ovi su veƒá pokrenuti');
      return;
    }

    try {
      console.log('[SERVIS KOMERC CRON] üöÄ Pokretanje Servis Komerc cron job-ova...');

      // Dnevni Servis Komerc izvje≈°taj - svaki dan u 22:00
      cron.schedule('0 22 * * *', async () => {
        console.log('[SERVIS KOMERC CRON] üïô Pokretanje automatskog dnevnog Servis Komerc izvje≈°taja...');
        try {
          // Servis Komerc email adresa
          await this.dailyReportService.sendDailyReport(new Date(), 'info@serviscommerce.me');
          console.log('[SERVIS KOMERC CRON] ‚úÖ Automatski dnevni Servis Komerc izvje≈°taj uspe≈°no poslat');
        } catch (error) {
          console.error('[SERVIS KOMERC CRON] ‚ùå Gre≈°ka pri slanju automatskog dnevnog izvje≈°taja:', error);
        }
      }, {
        timezone: "Europe/Belgrade"
      });

      this.isRunning = true;
      console.log('[SERVIS KOMERC CRON] ‚úÖ Servis Komerc cron job-ovi pokrenuti');
      console.log('[SERVIS KOMERC CRON] üìÖ Dnevni izvje≈°taj: svaki dan u 22:00 (Belgrade vreme)');
      console.log('[SERVIS KOMERC CRON] üìß Email adresa: info@serviscommerce.me');

    } catch (error) {
      console.error('[SERVIS KOMERC CRON] ‚ùå Gre≈°ka pri pokretanju cron job-ova:', error);
      throw error;
    }
  }

  /**
   * Za≈°tava da li su cron job-ovi pokrenuti
   */
  isRunningJobs(): boolean {
    return this.isRunning;
  }

  /**
   * Testira dnevni izvje≈°taj (bez slanja email-a)
   */
  async testDailyReport(): Promise<any> {
    try {
      console.log('[SERVIS KOMERC CRON] üß™ Testiranje dnevnog izvje≈°taja...');
      const reportData = await this.dailyReportService.testReportGeneration();
      console.log('[SERVIS KOMERC CRON] ‚úÖ Test dnevnog izvje≈°taja zavr≈°en uspe≈°no');
      return reportData;
    } catch (error) {
      console.error('[SERVIS KOMERC CRON] ‚ùå Gre≈°ka u testu dnevnog izvje≈°taja:', error);
      throw error;
    }
  }

  /**
   * Ruƒçno pokretanje dnevnog izvje≈°taja
   */
  async manualDailyReport(date: Date = new Date(), emailAddress?: string): Promise<boolean> {
    try {
      console.log('[SERVIS KOMERC CRON] üöÄ Ruƒçno pokretanje dnevnog Servis Komerc izvje≈°taja...');
      const targetEmail = emailAddress || 'info@serviscommerce.me';
      const success = await this.dailyReportService.sendDailyReport(date, targetEmail);
      
      if (success) {
        console.log('[SERVIS KOMERC CRON] ‚úÖ Ruƒçno pokrenut dnevni izvje≈°taj uspe≈°no poslat');
        return true;
      } else {
        console.error('[SERVIS KOMERC CRON] ‚ùå Gre≈°ka pri ruƒçnom pokretanju dnevnog izvje≈°taja');
        return false;
      }
    } catch (error) {
      console.error('[SERVIS KOMERC CRON] ‚ùå Gre≈°ka pri ruƒçnom pokretanju:', error);
      return false;
    }
  }
}